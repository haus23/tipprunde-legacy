/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SpielerRouteImport } from './routes/spieler_/route'
import { Route as SpieleRouteImport } from './routes/spiele_/route'
import { Route as homeIndexImport } from './routes/(home)/index'

// Create/Update Routes

const SpielerRouteRoute = SpielerRouteImport.update({
  id: '/spieler_',
  path: '/spieler',
  getParentRoute: () => rootRoute,
} as any)

const SpieleRouteRoute = SpieleRouteImport.update({
  id: '/spiele_',
  path: '/spiele',
  getParentRoute: () => rootRoute,
} as any)

const homeIndexRoute = homeIndexImport.update({
  id: '/(home)/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/spiele_': {
      id: '/spiele_'
      path: '/spiele'
      fullPath: '/spiele'
      preLoaderRoute: typeof SpieleRouteImport
      parentRoute: typeof rootRoute
    }
    '/spieler_': {
      id: '/spieler_'
      path: '/spieler'
      fullPath: '/spieler'
      preLoaderRoute: typeof SpielerRouteImport
      parentRoute: typeof rootRoute
    }
    '/(home)/': {
      id: '/(home)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof homeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/spiele': typeof SpieleRouteRoute
  '/spieler': typeof SpielerRouteRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesByTo {
  '/spiele': typeof SpieleRouteRoute
  '/spieler': typeof SpielerRouteRoute
  '/': typeof homeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/spiele_': typeof SpieleRouteRoute
  '/spieler_': typeof SpielerRouteRoute
  '/(home)/': typeof homeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/spiele' | '/spieler' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/spiele' | '/spieler' | '/'
  id: '__root__' | '/spiele_' | '/spieler_' | '/(home)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  SpieleRouteRoute: typeof SpieleRouteRoute
  SpielerRouteRoute: typeof SpielerRouteRoute
  homeIndexRoute: typeof homeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  SpieleRouteRoute: SpieleRouteRoute,
  SpielerRouteRoute: SpielerRouteRoute,
  homeIndexRoute: homeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/spiele_",
        "/spieler_",
        "/(home)/"
      ]
    },
    "/spiele_": {
      "filePath": "spiele_/route.tsx"
    },
    "/spieler_": {
      "filePath": "spieler_/route.tsx"
    },
    "/(home)/": {
      "filePath": "(home)/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
